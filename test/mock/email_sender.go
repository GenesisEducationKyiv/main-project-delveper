// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/GenesisEducationKyiv/main-project-delveper/internal/subs"
	"sync"
)

// Ensure, that EmailSenderMock does implement subs.EmailSender.
// If this is not the case, regenerate this file with moq.
var _ subs.EmailSender = &EmailSenderMock{}

// EmailSenderMock is a mock implementation of subs.EmailSender.
//
//	func TestSomethingThatUsesEmailSender(t *testing.T) {
//
//		// make and configure a mocked subs.EmailSender
//		mockedEmailSender := &EmailSenderMock{
//			SendFunc: func(message subs.Message) error {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedEmailSender in code that requires subs.EmailSender
//		// and then make assertions.
//
//	}
type EmailSenderMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(message subs.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// Message is the message argument value.
			Message subs.Message
		}
	}
	lockSend sync.RWMutex
}

// Send calls SendFunc.
func (mock *EmailSenderMock) Send(message subs.Message) error {
	if mock.SendFunc == nil {
		panic("EmailSenderMock.SendFunc: method is nil but EmailSender.Send was just called")
	}
	callInfo := struct {
		Message subs.Message
	}{
		Message: message,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(message)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedEmailSender.SendCalls())
func (mock *EmailSenderMock) SendCalls() []struct {
	Message subs.Message
} {
	var calls []struct {
		Message subs.Message
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
