// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/GenesisEducationKyiv/main-project-delveper/internal/subscription"
	"sync"
)

// Ensure, that EmailRepositoryMock does implement subscription.EmailRepository.
// If this is not the case, regenerate this file with moq.
var _ subscription.EmailRepository = &EmailRepositoryMock{}

// EmailRepositoryMock is a mock implementation of subscription.EmailRepository.
//
//	func TestSomethingThatUsesEmailRepository(t *testing.T) {
//
//		// make and configure a mocked subscription.EmailRepository
//		mockedEmailRepository := &EmailRepositoryMock{
//			AddFunc: func(email subscription.Email) error {
//				panic("mock out the Add method")
//			},
//			GetAllFunc: func() ([]subscription.Email, error) {
//				panic("mock out the GetAll method")
//			},
//		}
//
//		// use mockedEmailRepository in code that requires subscription.EmailRepository
//		// and then make assertions.
//
//	}
type EmailRepositoryMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(email subscription.Email) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func() ([]subscription.Email, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Email is the email argument value.
			Email subscription.Email
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
		}
	}
	lockAdd    sync.RWMutex
	lockGetAll sync.RWMutex
}

// Add calls AddFunc.
func (mock *EmailRepositoryMock) Add(email subscription.Email) error {
	if mock.AddFunc == nil {
		panic("EmailRepositoryMock.AddFunc: method is nil but EmailRepository.Add was just called")
	}
	callInfo := struct {
		Email subscription.Email
	}{
		Email: email,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(email)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedEmailRepository.AddCalls())
func (mock *EmailRepositoryMock) AddCalls() []struct {
	Email subscription.Email
} {
	var calls []struct {
		Email subscription.Email
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *EmailRepositoryMock) GetAll() ([]subscription.Email, error) {
	if mock.GetAllFunc == nil {
		panic("EmailRepositoryMock.GetAllFunc: method is nil but EmailRepository.GetAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc()
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedEmailRepository.GetAllCalls())
func (mock *EmailRepositoryMock) GetAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}
