// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/GenesisEducationKyiv/main-project-delveper/internal/rate"
	"sync"
)

// Ensure, that GetterMock does implement rate.Getter.
// If this is not the case, regenerate this file with moq.
var _ rate.Getter = &GetterMock{}

// GetterMock is a mock implementation of rate.Getter.
//
//	func TestSomethingThatUsesGetter(t *testing.T) {
//
//		// make and configure a mocked rate.Getter
//		mockedGetter := &GetterMock{
//			GetFunc: func(contextMoqParam context.Context) (float64, error) {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedGetter in code that requires rate.Getter
//		// and then make assertions.
//
//	}
type GetterMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(contextMoqParam context.Context) (float64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *GetterMock) Get(contextMoqParam context.Context) (float64, error) {
	if mock.GetFunc == nil {
		panic("GetterMock.GetFunc: method is nil but Getter.Get was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(contextMoqParam)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedGetter.GetCalls())
func (mock *GetterMock) GetCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
