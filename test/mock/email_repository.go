// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/GenesisEducationKyiv/main-project-delveper/internal/subscription"
	"sync"
)

// Ensure, that SubscriberRepositoryMock does implement subscription.SubscriberRepository.
// If this is not the case, regenerate this file with moq.
var _ subscription.SubscriberRepository = &SubscriberRepositoryMock{}

// SubscriberRepositoryMock is a mock implementation of subscription.SubscriberRepository.
//
//	func TestSomethingThatUsesSubscriberRepository(t *testing.T) {
//
//		// make and configure a mocked subscription.SubscriberRepository
//		mockedSubscriberRepository := &SubscriberRepositoryMock{
//			AddFunc: func(subscriber subscription.Subscriber) error {
//				panic("mock out the Add method")
//			},
//			ListFunc: func() ([]subscription.Subscriber, error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedSubscriberRepository in code that requires subscription.SubscriberRepository
//		// and then make assertions.
//
//	}
type SubscriberRepositoryMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(subscriber subscription.Subscriber) error

	// ListFunc mocks the List method.
	ListFunc func() ([]subscription.Subscriber, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Subscriber is the subscriber argument value.
			Subscriber subscription.Subscriber
		}
		// List holds details about calls to the List method.
		List []struct {
		}
	}
	lockAdd  sync.RWMutex
	lockList sync.RWMutex
}

// Add calls AddFunc.
func (mock *SubscriberRepositoryMock) Add(subscriber subscription.Subscriber) error {
	if mock.AddFunc == nil {
		panic("SubscriberRepositoryMock.AddFunc: method is nil but SubscriberRepository.Add was just called")
	}
	callInfo := struct {
		Subscriber subscription.Subscriber
	}{
		Subscriber: subscriber,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(subscriber)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedSubscriberRepository.AddCalls())
func (mock *SubscriberRepositoryMock) AddCalls() []struct {
	Subscriber subscription.Subscriber
} {
	var calls []struct {
		Subscriber subscription.Subscriber
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SubscriberRepositoryMock) List() ([]subscription.Subscriber, error) {
	if mock.ListFunc == nil {
		panic("SubscriberRepositoryMock.ListFunc: method is nil but SubscriberRepository.List was just called")
	}
	callInfo := struct {
	}{}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc()
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedSubscriberRepository.ListCalls())
func (mock *SubscriberRepositoryMock) ListCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
