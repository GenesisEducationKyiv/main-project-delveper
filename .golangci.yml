linters:
  # Disable all linters.
  disable-all: true
  enable:
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers [fast: true, auto-fix: false]
    - bodyclose # checks whether HTTP response body is closed successfully [fast: false, auto-fix: false]
    - cyclop # checks function and package cyclomatic complexity [fast: false, auto-fix: false]
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()) [fast: true, auto-fix: false]
    - dupl # Tool for code clone detection [fast: true, auto-fix: false]
    - durationcheck # check for two durations multiplied together [fast: false, auto-fix: false]
    - errname # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`. [fast: false, auto-fix: false]
    - forbidigo # Forbids identifiers [fast: true, auto-fix: false]
    - forcetypeassert # finds forced type assertions [fast: true, auto-fix: false]
    - gochecknoglobals # check that no global variables exist [fast: true, auto-fix: false]
    - goconst # Finds repeated strings that could be replaced by a constant [fast: true, auto-fix: false]
    - gocritic # Provides many diagnostics that check for bugs, performance and style issues. [fast: false, auto-fix: false]
    - gosimple # Linter for Go source code that specializes in simplifying a code [fast: true, auto-fix: false]
    - goheader # Checks is file header matches to pattern [fast: true, auto-fix: false]
    - gomnd # An analyzer to detect magic numbers. [fast: true, auto-fix: false]
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end [fast: true, auto-fix: false]
    - gosec # Inspects source code for security problems [fast: false, auto-fix: false]
    - gosimple # Linter for Go source code that specializes in simplifying a code [fast: false, auto-fix: false]
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string [fast: false, auto-fix: false]
    - godot # Checks that the Go package is using the dot notation [fast: false, auto-fix: false]
    - importas # Enforces consistent import aliases [fast: false, auto-fix: false]
    - ineffassign # Detects when assignments to existing variables are not used [fast: true, auto-fix: false]
    - lll # Reports long lines [fast: true, auto-fix: false]
    - makezero # Finds slice declarations with non-zero initial length [fast: false, auto-fix: false]
    - misspell # Finds commonly misspelled English words in comments [fast: true, auto-fix: true]
    - nakedret # Finds naked returns in functions greater than a specified function length [fast: true, auto-fix: false]
    - nestif # Reports deeply nested if statements [fast: true, auto-fix: false]
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil. [fast: false, auto-fix: false]
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks [fast: false, auto-fix: false]
    - thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers [fast: false, auto-fix: false]
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code [fast: false, auto-fix: false]
    - unparam # Reports unused function parameters [fast: false, auto-fix: false]
    - unused # Checks Go code for unused constants, variables, functions and types [fast: false, auto-fix: false]

issues:
  exclude-rules:
    - linters:
        - lll
      source: "^//"

linters-settings:
  lll:
    line-length: 140

run:
  # default concurrency is an available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

